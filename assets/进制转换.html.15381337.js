import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as p}from"./app.a63c222e.js";const t={},e=p(`<h1 id="\u8FDB\u5236\u8F6C\u6362" tabindex="-1"><a class="header-anchor" href="#\u8FDB\u5236\u8F6C\u6362" aria-hidden="true">#</a> \u8FDB\u5236\u8F6C\u6362</h1><p>http://c.biancheng.net/view/1725.html</p><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXCHAR</span> <span class="token expression"><span class="token number">101</span> </span><span class="token comment">/*max string length*/</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">char_to_num</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token comment">/*\u8FD4\u56DE\u5B57\u7B26\u5BF9\u5E94\u7684\u6570\u5B57*/</span>
<span class="token keyword">char</span> <span class="token function">num_to_char</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>                                        <span class="token comment">/*\u8FD4\u56DE\u6570\u5B57\u5BF9\u5E94\u7684\u5B57\u7B26*/</span>
<span class="token keyword">long</span> <span class="token function">any_to_ten</span><span class="token punctuation">(</span><span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">/*\u8FD4\u56DE\u7531\u539F\u6570\u8F6C\u6362\u6210\u768410\u8FDB\u5236\u6570*/</span>
<span class="token keyword">int</span> <span class="token function">ten_to_any</span><span class="token punctuation">(</span><span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">long</span> decimal_num<span class="token punctuation">,</span> <span class="token keyword">int</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/*\u8FD4\u56DE\u8F6C\u6362\u6210\u76EE\u6807\u6570\u5236\u540E\u5B57\u7B26\u6570\u7EC4\u7684\u957F\u5EA6*/</span>

<span class="token keyword">void</span> <span class="token function">any_to_any</span><span class="token punctuation">(</span><span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> source<span class="token punctuation">,</span><span class="token keyword">int</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">/*\u4E0A\u9762\u4E24\u4E2A\u62FC\u4E00\u8D77\u5C31\u662F\u4EFB\u610F\u8FDB\u5236\u8F6C\u6362  \u4EFB\u610F\u8FDB\u5236\u4E4B\u95F4\u8F6C\u6362 2-16 \u53EA\u652F\u6301int*/</span>
<span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>                             <span class="token comment">/*\u5C06\u5B57\u7B26\u6570\u7EC4\u9006\u5E8F\u6253\u5370*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">char_to_num</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&gt;=</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> ch <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span> <span class="token comment">/*\u5C06\u6570\u5B57\u5B57\u7B26\u8F6C\u6362\u6210\u6570\u5B57*/</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> ch <span class="token operator">-</span> <span class="token char">&#39;A&#39;</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">/*\u5C06\u5B57\u6BCD\u5B57\u7B26\u8F6C\u6362\u6210\u6570\u5B57*/</span>
<span class="token punctuation">}</span>

<span class="token keyword">char</span> <span class="token function">num_to_char</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token char">&#39;0&#39;</span> <span class="token operator">+</span> num <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span> <span class="token operator">+</span> num <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">long</span> <span class="token function">any_to_ten</span><span class="token punctuation">(</span><span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> source<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> decimal_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    length <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;length is %d\\n&quot;</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        decimal_num <span class="token operator">=</span> <span class="token punctuation">(</span>decimal_num <span class="token operator">*</span> source<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">char_to_num</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> decimal_num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">ten_to_any</span><span class="token punctuation">(</span><span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">long</span> decimal_num<span class="token punctuation">,</span> <span class="token keyword">int</span> object<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>decimal_num<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">num_to_char</span><span class="token punctuation">(</span>decimal_num <span class="token operator">%</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
        decimal_num <span class="token operator">=</span> decimal_num <span class="token operator">/</span> object<span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> i<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c &quot;</span><span class="token punctuation">,</span> temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code><span class="token comment">//\u4EFB\u610F\u8FDB\u5236\u4E4B\u95F4\u8F6C\u6362 2-16 \u53EA\u652F\u6301int</span>
<span class="token keyword">void</span> <span class="token function">any_to_any</span><span class="token punctuation">(</span><span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> source<span class="token punctuation">,</span><span class="token keyword">int</span> object<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u8F6C\u6362\u524D\u7684\u6570\u5236\u662F\uFF1A int source;</span>
    <span class="token comment">//\u8F6C\u6362\u540E\u7684\u6570\u5236\u662F\uFF1A int object;</span>
    <span class="token comment">//\u5B58\u653E\u6570\u636E\u7684\u5B57\u7B26\u4E32: char temp[MAXCHAR];</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>
    <span class="token comment">//\u8F6C\u6362\u524D\u7684\u6570</span>
    <span class="token keyword">long</span> decimal_num<span class="token punctuation">;</span>


    decimal_num <span class="token operator">=</span> <span class="token function">any_to_ten</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    length <span class="token operator">=</span> <span class="token function">ten_to_any</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> decimal_num<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">output</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),o=[e];function c(l,i){return s(),a("div",null,o)}var r=n(t,[["render",c],["__file","\u8FDB\u5236\u8F6C\u6362.html.vue"]]);export{r as default};
