import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as t}from"./app.a63c222e.js";const p={},o=t(`<h1 id="\u5C06\u539F\u578B\u7528\u4E8E\u68C0\u6D4B\u6570\u636E\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#\u5C06\u539F\u578B\u7528\u4E8E\u68C0\u6D4B\u6570\u636E\u7C7B\u578B" aria-hidden="true">#</a> \u5C06\u539F\u578B\u7528\u4E8E\u68C0\u6D4B\u6570\u636E\u7C7B\u578B</h1><h2 id="prototype\u524D\u7F6E\u77E5\u8BC6" tabindex="-1"><a class="header-anchor" href="#prototype\u524D\u7F6E\u77E5\u8BC6" aria-hidden="true">#</a> prototype\u524D\u7F6E\u77E5\u8BC6</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> getProto <span class="token operator">=</span> Object<span class="token punctuation">.</span>getPrototypeOf<span class="token punctuation">,</span>
    class2type <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    toString <span class="token operator">=</span> class2type<span class="token punctuation">.</span>toString<span class="token punctuation">,</span> <span class="token comment">//-&gt;Object.prototype.toString \u68C0\u6D4B\u6570\u636E\u7C7B\u578B</span>
    hasOwn <span class="token operator">=</span> class2type<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">,</span> <span class="token comment">//-&gt;Object.prototype.hasOwnProperty</span>
    fnToString <span class="token operator">=</span> hasOwn<span class="token punctuation">.</span>toString<span class="token punctuation">,</span> <span class="token comment">//-&gt;Function.prototype.toString \u628A\u51FD\u6570\u8F6C\u6362\u4E3A\u5B57\u7B26\u4E32</span>
    ObjectFunctionString <span class="token operator">=</span> <span class="token function">fnToString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//-&gt;\u628AObject\u8F6C\u6362\u4E3A\u5B57\u7B26\u4E32 \u201Cfunction Object(){[native code]}\u201D</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="\u6570\u636E\u7C7B\u578B\u68C0\u6D4B" tabindex="-1"><a class="header-anchor" href="#\u6570\u636E\u7C7B\u578B\u68C0\u6D4B" aria-hidden="true">#</a> \u6570\u636E\u7C7B\u578B\u68C0\u6D4B</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> class2type <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// \u7B80\u5386\u6570\u636E\u7C7B\u578B\u68C0\u6D4B\u7684\u201C\u6620\u5C04\u8868\u201D: toString.call\u68C0\u6D4B\u7684\u7ED3\u679C\u4F5C\u4E3A\u5C5E\u6027\u540D\uFF0C\u5C5E\u6027\u503C\u662F\u5BF9\u5E94\u7684\u6570\u636E\u7C7B\u578B\u300C\u5B57\u7B26\u4E32&amp;\u5C0F\u5199,\u7C7B\u4F3C\u4E8Etypeof\u7684\u7ED3\u679C\u300D</span>
<span class="token keyword">var</span> typeArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Boolean&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Number&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;String&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Function&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Array&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Date&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;RegExp&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Object&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Error&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Symbol&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BigInt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;GeneratorFunction&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Set&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Map&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WeakSet&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;WeakMap&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

typeArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    class2type<span class="token punctuation">[</span><span class="token string">&quot;[object &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u4E13\u95E8\u8FDB\u884C\u6570\u636E\u7C7B\u578B\u68C0\u6D4B\u7684\u529E\u6CD5 </span>
<span class="token keyword">var</span> <span class="token function-variable function">toType</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">toType</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// null&amp;undefined\u76F4\u63A5\u8FD4\u56DE\u5BF9\u5E94\u7684\u5B57\u7B26\u4E32</span>
    <span class="token comment">// \u539F\u59CB\u503C\u7C7B\u578B\u57FA\u4E8Etypeof\u68C0\u6D4B</span>
    <span class="token comment">// \u5BF9\u8C61\u7C7B\u578B\u300C\u5305\u542B\u539F\u59CB\u503C\u7684\u5BF9\u8C61\u7C7B\u578B\u300D\u57FA\u4E8EtoString.call\u68C0\u6D4B</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">?</span>
        class2type<span class="token punctuation">[</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">:</span>
        <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u4E13\u95E8\u8FDB\u884C\u6570\u636E\u7C7B\u578B\u68C0\u6D4B\u7684\u529E\u6CD5 </span>
<span class="token keyword">var</span> <span class="token function-variable function">toType</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">toType</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> obj <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">&quot;function&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">;</span>
    <span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\[object ([0-9A-Za-z]+)\\]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
        value <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">/*// Match &quot;quick brown&quot; followed by &quot;jumps&quot;, ignoring characters in between
        // Remember &quot;brown&quot; and &quot;jumps&quot;
        // Ignore case
        
        var re = /quick\\s(brown).+?(jumps)/ig;
        var result = re.exec(&#39;The Quick Brown Fox Jumps Over The Lazy Dog&#39;);
        Copy to Clipboard
        \u4E0B\u8868\u5217\u51FA\u8FD9\u4E2A\u811A\u672C\u7684\u8FD4\u56DE\u503C\uFF1A
        
        \u5BF9\u8C61	\u5C5E\u6027/\u7D22\u5F15	\u63CF\u8FF0	\u4F8B\u5B50
        result	[0]	\u5339\u914D\u7684\u5168\u90E8\u5B57\u7B26\u4E32	Quick Brown Fox Jumps
        [1], ...[n ]	\u62EC\u53F7\u4E2D\u7684\u5206\u7EC4\u6355\u83B7	[1] = Brown
        [2] = Jumps*/</span>
    <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u68C0\u6D4B\u662F\u5426\u4E3A\u4E00\u4E2A\u51FD\u6570</span>
<span class="token keyword">var</span> <span class="token function-variable function">isFunction</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// In some browsers, typeof returns &quot;function&quot; for HTML &lt;object&gt; elements</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> obj <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">.</span>nodeType <span class="token operator">!==</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token comment">// \u68C0\u6D4B\u662F\u5426\u4E3A\u4E00\u4E2Awindow\u5BF9\u8C61</span>

<span class="token comment">//window.window===window =&gt; true</span>
<span class="token keyword">var</span> <span class="token function-variable function">isWindow</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">isWindow</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// null &amp; undefined \u65E0\u6CD5\u8FDB\u884C\u6210\u5458\u8BBF\u95EE</span>
    <span class="token keyword">return</span> obj <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> obj <span class="token operator">===</span> obj<span class="token punctuation">.</span>window<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u68C0\u6D4B\u662F\u5426\u4E3A\u6570\u7EC4\u6216\u8005\u7C7B\u6570\u7EC4</span>
<span class="token keyword">var</span> <span class="token function-variable function">isArrayLike</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">isArrayLike</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>obj <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;length&quot;</span> <span class="token keyword">in</span> obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
        type <span class="token operator">=</span> <span class="token function">toType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u51FD\u6570&amp;window\u90FD\u6709length\u5C5E\u6027\uFF0C\u4F46\u662F\u4E0D\u662F\u7C7B\u6570\u7EC4</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isWindow</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> type <span class="token operator">===</span> <span class="token string">&quot;array&quot;</span> <span class="token operator">||</span> length <span class="token operator">===</span> <span class="token number">0</span> <span class="token operator">||</span>
        <span class="token keyword">typeof</span> length <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span> <span class="token operator">&amp;&amp;</span> length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">in</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// \u68C0\u6D4B\u662F\u5426\u4E3A\u7EAF\u7CB9\u7684\u5BF9\u8C61\uFF1A\u76F4\u5C5E\u7C7B\u662FObject \u6216\u8005 obj.__proto__===Object.prototype\uFF08\u6570\u7EC4/\u6B63\u5219\u7B49\u90FD\u4E0D\u662F\uFF09</span>
<span class="token keyword">var</span> <span class="token function-variable function">isPlainObject</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">isPlainObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> proto<span class="token punctuation">,</span> Ctor<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj <span class="token operator">||</span> <span class="token function">toType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    proto <span class="token operator">=</span> <span class="token function">getProto</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>proto<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    Ctor <span class="token operator">=</span> <span class="token function">hasOwn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>proto<span class="token punctuation">,</span> <span class="token string">&quot;constructor&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> proto<span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> Ctor <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">fnToString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Ctor<span class="token punctuation">)</span> <span class="token operator">===</span> ObjectFunctionString<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// \u68C0\u6D4B\u662F\u5426\u4E3A\u7A7A\u5BF9\u8C61</span>
<span class="token keyword">var</span> <span class="token function-variable function">isEmptyObject</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">isEmptyObject</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Symbol <span class="token operator">!==</span> <span class="token string">&quot;undefined&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        keys <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertySymbols</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> keys<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// \u68C0\u6D4B\u662F\u5426\u4E3A\u6570\u5B57</span>
<span class="token keyword">var</span> <span class="token function-variable function">isNumeric</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">isNumeric</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> type <span class="token operator">=</span> <span class="token function">toType</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">&quot;number&quot;</span> <span class="token operator">||</span> type <span class="token operator">===</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token operator">+</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),e=[o];function c(l,i){return s(),a("div",null,e)}var k=n(p,[["render",c],["__file","13.\u5C06\u539F\u578B\u7528\u4E8E\u68C0\u6D4B\u6570\u636E\u7C7B\u578B.html.vue"]]);export{k as default};
